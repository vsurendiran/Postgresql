Data types
---------CREATE TABLE example_table (
    -- Numeric Types
    id SERIAL PRIMARY KEY,                         -- Auto-incrementing primary key
    small_num SMALLINT CHECK (small_num > 0),      -- Small integer with a CHECK constraint
    big_num BIGINT NOT NULL,                       -- Big integer with NOT NULL constraint
    decimal_num DECIMAL(10, 2) DEFAULT 0.0,        -- Decimal with default value
    floating_num DOUBLE PRECISION,                 -- Floating-point number

    -- Character Types
    fixed_char CHAR(10) DEFAULT 'default',         -- Fixed-length character string
    variable_char VARCHAR(50) UNIQUE,              -- Variable-length character string with UNIQUE constraint
    text_field TEXT CHECK (char_length(text_field) > 5), -- Text type with a length CHECK constraint

    -- Binary Data Type
    binary_data BYTEA,                             -- Binary data

    -- Date/Time Types
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, -- Timestamp with time zone and default value
    date_field DATE,                               -- Date type
    time_field TIME,                               -- Time of day

    -- Boolean Type
    is_active BOOLEAN DEFAULT TRUE,                -- Boolean with a default value

    -- Enumerated Type
    status STATUS_TYPE DEFAULT 'pending',          -- ENUM type with a default value (Assume STATUS_TYPE is predefined)

    -- Geometric Type
    location POINT,                                -- Geometric point

    -- Network Address Types
    ip_address INET,                               -- IP address type
    mac_address MACADDR,                           -- MAC address type

    -- JSON Type
    json_data JSONB,                               -- JSONB data type

    -- Array Types
    tags TEXT[],                                   -- Array of text

    -- Range Types
    int_range INT4RANGE,                           -- Range of integers

    -- UUID Type
    unique_id UUID DEFAULT gen_random_uuid(),      -- UUID with a default value

    -- XML Type
    xml_data XML,                                  -- XML data type

    -- Composite Type
    composite_data COMPOSITE_TYPE,                 -- Composite type (Assume COMPOSITE_TYPE is predefined)

    -- Custom Constraint
    CHECK (big_num > small_num)                    -- Custom CHECK constraint
);

-- Example ENUM type for the status column
CREATE TYPE STATUS_TYPE AS ENUM ('pending', 'approved', 'rejected');

-- Example Composite Type
CREATE TYPE COMPOSITE_TYPE AS (
    field1 INTEGER,
    field2 TEXT
);

Create table emp(empid , ename , jobdesc , salary)
SELECT indexname AS index_name,  indexdef AS index_definition 
FROM pg_indexes WHERE  schemaname = 'public';  -- or your schema name

PROCEDURE
=========
    CREATE OR REPLACE PROCEDURE add_employee(
    first_name_param VARCHAR,
    last_name_param VARCHAR,
    department_param VARCHAR,
    salary_param NUMERIC
)
LANGUAGE plpgsql
AS $$  -- To avoid special character 
BEGIN
    -- Insert a new record into the employees table
    INSERT INTO employees (first_name, last_name, department, salary)
    VALUES (first_name_param, last_name_param, department_param, salary_param);

    -- Return a notice indicating the record was inserted
    RAISE NOTICE 'Employee % % has been added to the % department with a salary of %', 
                 first_name_param, last_name_param, department_param, salary_param;
END;
$$;


Exceptions
==========
    CREATE OR REPLACE PROCEDURE transfer_funds(
    sender_account_id INT,
    receiver_account_id INT,
    amount NUMERIC
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Start transaction block
    BEGIN
        -- Subtract amount from sender's account
        UPDATE accounts
        SET balance = balance - amount
        WHERE account_id = sender_account_id;

        -- Check if the sender's balance is sufficient
        IF NOT FOUND THEN
            RAISE EXCEPTION 'Sender account % does not exist or insufficient balance', sender_account_id;
        END IF;

        -- Add amount to receiver's account
        UPDATE accounts
        SET balance = balance + amount
        WHERE account_id = receiver_account_id;

        -- Check if the receiver's account exists
        IF NOT FOUND THEN
            RAISE EXCEPTION 'Receiver account % does not exist', receiver_account_id;
        END IF;

        -- Commit transaction
        COMMIT;

    EXCEPTION
        -- Handle insufficient balance
        WHEN SQLSTATE 'P0001' THEN
            RAISE NOTICE 'Transaction failed: %', SQLERRM;
            ROLLBACK;

        -- Handle any other errors
        WHEN OTHERS THEN
            RAISE NOTICE 'An unexpected error occurred: %', SQLERRM;
            ROLLBACK;
    END;
END;
$$;

EXCEPTION
    WHEN unique_violation THEN
        RAISE NOTICE 'Duplicate entry detected';
        -- Handle unique violation
    WHEN foreign_key_violation THEN
        RAISE NOTICE 'Foreign key constraint violation';
        -- Handle foreign key violation
    WHEN OTHERS THEN
        RAISE NOTICE 'An unexpected error occurred: %', SQLERRM;
        ROLLBACK;

Common SQLSTATE Error Codes:
23505: Unique violation.
23503: Foreign key violation.
23502: Not-null violation.
22P02: Invalid text representation (e.g., parsing error).
P0001: Default code for user-defined exceptions.
=================================================================
CREATE OR REPLACE PROCEDURE withdraw_funds(
    p_account_id INT,
    p_amount NUMERIC
)
LANGUAGE plpgsql
AS $$
DECLARE
    min_balance CONSTANT NUMERIC := 100.00;  -- Minimum required balance
    current_balance NUMERIC;
BEGIN
    -- Fetch the current balance
    SELECT balance INTO current_balance
    FROM accounts
    WHERE account_id = p_account_id;

    -- Check if the account exists
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Account ID % does not exist', p_account_id
            USING ERRCODE = 'P1001';  -- Custom SQLSTATE code
    END IF;

    -- Check if the withdrawal would cause balance to drop below minimum
    IF current_balance - p_amount < min_balance THEN
        RAISE EXCEPTION 'Withdrawal denied: Balance cannot drop below %', min_balance
            USING ERRCODE = 'P1002';  -- Custom SQLSTATE code
    END IF;

    -- Perform the withdrawal
    UPDATE accounts
    SET balance = balance - p_amount
    WHERE account_id = p_account_id;

    RAISE NOTICE 'Withdrawal of % from account % successful. New balance is %', 
                 p_amount, p_account_id, current_balance - p_amount;
END;
$$;
==================================================================
CREATE OR REPLACE FUNCTION total_salary(dept_name VARCHAR)
RETURNS NUMERIC
LANGUAGE plpgsql
AS $$
DECLARE
    total NUMERIC := 0;
BEGIN
    -- Calculate the total salary for the given department
    SELECT SUM(salary) INTO total
    FROM employees
    WHERE department = dept_name;

    -- Return the total salary
    RETURN total;
END;
$$;

SELECT total_salary('Engineering');
-------------------------------------------------------------------------

RAISE EXCEPTION:

The RAISE EXCEPTION statement is used to raise an error. 
    The USING ERRCODE = 'P1001' assigns a custom SQLSTATE code to the exception. This helps to identify the specific type of error that occurred.
Handling the Withdrawal:

If no exceptions are raised, the balance is updated, and a success message is displayed using RAISE NOTICE.    

Execute procedure
================
    CALL withdraw_funds(1, 500.00);

DO $$
BEGIN
    BEGIN
        CALL withdraw_funds(1, 500.00);
    EXCEPTION
        WHEN SQLSTATE 'P1001' THEN
            RAISE NOTICE 'Custom error: Account does not exist.';
        WHEN SQLSTATE 'P1002' THEN
            RAISE NOTICE 'Custom error: Minimum balance violation.';
        WHEN OTHERS THEN
            RAISE NOTICE 'An unexpected error occurred.';
    END;
END;
$$;

Custom SQLSTATE Codes: Use custom SQLSTATE codes starting with 'P' to define user-defined exceptions.
RAISE EXCEPTION:       Used to raise the exception, with a custom message and an optional SQLSTATE code.
EXCEPTION Block:       You can catch and handle these exceptions using an EXCEPTION block in your PL/pgSQL code.


Materialized view

Refresh materialized view <viewname>
--------------------------------------------

Key Concepts for Collections in PostgreSQL
Arrays
JSON and JSONB
HSTORE
Composite Types
Row Types
Table Inheritance
CTEs and Subqueries
1. Arrays
Arrays are a collection of elements of the same data type. PostgreSQL allows you to store arrays in columns, making it easy to work with multiple values in a single field.

CREATE TABLE students (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    grades INTEGER[]
);

-- Insert a student with an array of grades
INSERT INTO students (name, grades) VALUES ('John Doe', '{85, 90, 78}');

-- Query to access array elements
SELECT name, grades[1] AS first_grade FROM students;
==========================================
CREATE OR REPLACE PROCEDURE process_employees(dept_name VARCHAR)
LANGUAGE plpgsql
AS $$
DECLARE
    emp_id INT;
    emp_name VARCHAR;
    emp_cursor CURSOR FOR
    SELECT id, name FROM employees WHERE department = dept_name;
BEGIN
    OPEN emp_cursor;

    LOOP
        FETCH emp_cursor INTO emp_id, emp_name;
        EXIT WHEN NOT FOUND;  -- Exit the loop when no more rows are found
        
        -- Process each row (for example, output the values)
        RAISE NOTICE 'Employee ID: %, Employee Name: %', emp_id, emp_name;
    END LOOP;

    CLOSE emp_cursor;
END;
$$;
================================================================
Temporary Table:
CREATE OR REPLACE FUNCTION bulk_collect_students()
RETURNS TABLE(id INT, name TEXT) AS $$
BEGIN
    CREATE TEMPORARY TABLE temp_students AS
    SELECT id, name FROM students WHERE grade > 80;
    
    RETURN QUERY SELECT * FROM temp_students;
    
    DROP TABLE temp_students;
END;
$$ LANGUAGE plpgsql;
======================================
DATE function
-------------
Date and Time Extraction
Date and Time Formatting
Date Arithmetic
Date and Time Conversion
Time Zone Handling
1. Date and Time Extraction
You can extract specific components from date and time values.

Examples:
Extract Year, Month, Day:

sql
Copy code
SELECT EXTRACT(YEAR FROM CURRENT_DATE) AS year,
       EXTRACT(MONTH FROM CURRENT_DATE) AS month,
       EXTRACT(DAY FROM CURRENT_DATE) AS day;
Extract Hour, Minute, Second:

sql
Copy code
SELECT EXTRACT(HOUR FROM CURRENT_TIME) AS hour,
       EXTRACT(MINUTE FROM CURRENT_TIME) AS minute,
       EXTRACT(SECOND FROM CURRENT_TIME) AS second;
2. Date and Time Formatting
You can format date and time values using TO_CHAR.

Examples:
Format Date as 'YYYY-MM-DD':

sql
Copy code
SELECT TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') AS formatted_date;
Format Time as 'HH24:MI
':

sql
Copy code
SELECT TO_CHAR(CURRENT_TIME, 'HH24:MI:SS') AS formatted_time;
Format Date and Time:

sql
Copy code
SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') AS formatted_datetime;
3. Date Arithmetic
Perform arithmetic operations with dates and intervals.

Examples:
Add Days to a Date:

sql
Copy code
SELECT CURRENT_DATE + INTERVAL '10 days' AS future_date;
Subtract Dates:

sql
Copy code
SELECT CURRENT_DATE - INTERVAL '30 days' AS past_date;
Calculate Difference in Days:

sql
Copy code
SELECT CURRENT_DATE - DATE '2024-01-01' AS days_difference;
Add Months to a Date:

sql
Copy code
SELECT CURRENT_DATE + INTERVAL '3 months' AS future_date;
4. Date and Time Conversion
Convert between different date and time formats or types.

Examples:
Convert Text to Date:

sql
Copy code
SELECT TO_DATE('2024-08-17', 'YYYY-MM-DD') AS date_value;
Convert Date to Text:

sql
Copy code
SELECT TO_CHAR(DATE '2024-08-17', 'Day, Month DD, YYYY') AS formatted_date;
Convert Text to Timestamp:

sql
Copy code
SELECT TO_TIMESTAMP('2024-08-17 14:30:00', 'YYYY-MM-DD HH24:MI:SS') AS timestamp_value;
Convert Timestamp to Text:

sql
Copy code
SELECT TO_CHAR(TIMESTAMP '2024-08-17 14:30:00', 'YYYY-MM-DD HH24:MI:SS') AS formatted_timestamp;
5. Time Zone Handling
Handle and convert between different time zones.

Examples:
Get Current Time in UTC:

sql
Copy code
SELECT CURRENT_TIMESTAMP AT TIME ZONE 'UTC' AS utc_time;
Convert Time to Another Time Zone:

sql
Copy code
SELECT CURRENT_TIMESTAMP AT TIME ZONE 'America/New_York' AS ny_time;
Convert Between Time Zones:

sql
Copy code
SELECT TIMESTAMP '2024-08-17 14:30:00' AT TIME ZONE 'UTC' AT TIME ZONE 'America/Los_Angeles' AS la_time;
Additional Useful Functions
AGE(): Calculates the age between two dates or from a given date to the current date.

sql
Copy code
SELECT AGE(DATE '2000-01-01') AS age;
DATE_TRUNC(): Truncates a timestamp to a specified level of precision (e.g., year, month, day).

sql
Copy code
SELECT DATE_TRUNC('month', CURRENT_DATE) AS start_of_month;
NOW(): Returns the current date and time.

sql
Copy code
SELECT NOW() AS current_datetime;
CURRENT_DATE: Returns the current date.

sql
Copy code
SELECT CURRENT_DATE AS today;
CURRENT_TIME: Returns the current time.

sql
Copy code
SELECT CURRENT_TIME AS now_time;
=========================================================================
Pivot query
-----------
create table sales_data (sale_month date,qty number(5));

select * from sales_data;

insert into sales_data 
select * from (
select add_months(trunc(sysdate-730,'yy'),level-1 ) sale_mon,300+(level*2)  sal_qty
from dual connect by level < 13);


SELECT *
FROM (
    SELECT TO_CHAR(sale_month, 'yyyy') year, qty, TO_CHAR(sale_month, 'Mon') AS sale_month_formatted
    FROM sales_data
)
PIVOT (
    SUM(qty)
    FOR sale_month_formatted IN ('Jan' AS JAN, 'Feb' AS FEB,'Mar' AS MAR)
);
==========================================================================
